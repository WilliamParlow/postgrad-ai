if (USArrests$UrbanPop[i2] != 0 & aux_min[i1] == -1) {
aux_min[i1] = i2
print("----")
print(i1)
print(i2)
print("----")
} else if (USArrests$UrbanPop[i2] != 0 & USArrests$UrbanPop[aux_min[i1]] > USArrests$UrbanPop[i2]) {
aux_min[i1] = i2
print("----")
print(i1)
print(i2)
print("----")
}
if (USArrests$UrbanPop[i2] != 0 & aux_max[i1] == -1) {
aux_max[i1] = i2
} else if (USArrests$UrbanPop[aux_max[i1]] < USArrests$UrbanPop[i2]) {
aux_max[i1] = i2
}
}
USArrests$UrbanPop[aux_min[i1]] = 0
USArrests$UrbanPop[aux_max[i1]] = 0
}
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MAIOR população: ")
for (i in aux_max) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MENOR população: ")
for (i in aux_min) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
data(USArrests)
aux_max = c(-1,-1,-1,-1,-1)
aux_min = c(-1,-1,-1,-1,-1)
for (i1 in 1:5) {
for (i2 in 1:50) {
if (USArrests$UrbanPop[i2] != 0 & aux_min[i1] == -1) {
aux_min[i1] = i2
print("----")
print(i1)
print(i2)
print("----")
} else if (USArrests$UrbanPop[i2] != 0 & USArrests$UrbanPop[aux_min[i1]] > USArrests$UrbanPop[i2]) {
aux_min[i1] = i2
print("----")
print(i1)
print(i2)
print("----")
}
if (USArrests$UrbanPop[i2] != 0 & aux_max[i1] == -1) {
aux_max[i1] = i2
} else if (USArrests$UrbanPop[aux_max[i1]] < USArrests$UrbanPop[i2]) {
aux_max[i1] = i2
}
}
USArrests$UrbanPop[aux_min[i1]] = 0
USArrests$UrbanPop[aux_max[i1]] = 0
}
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MAIOR população: ")
for (i in aux_max) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MENOR população: ")
for (i in aux_min) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
data(USArrests)
aux_max = c(-1,-1,-1,-1,-1)
aux_min = c(-1,-1,-1,-1,-1)
for (i1 in 1:5) {
for (i2 in 1:50) {
if (USArrests$UrbanPop[i2] != 0 & aux_min[i1] == -1) {
aux_min[i1] = i2
} else if (USArrests$UrbanPop[i2] != 0 & USArrests$UrbanPop[aux_min[i1]] > USArrests$UrbanPop[i2]) {
aux_min[i1] = i2
}
if (USArrests$UrbanPop[i2] != 0 & aux_max[i1] == -1) {
aux_max[i1] = i2
} else if (USArrests$UrbanPop[aux_max[i1]] < USArrests$UrbanPop[i2]) {
aux_max[i1] = i2
}
}
USArrests$UrbanPop[aux_min[i1]] = 0
USArrests$UrbanPop[aux_max[i1]] = 0
}
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MAIOR população: ")
for (i in aux_max) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MENOR população: ")
for (i in aux_min) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
data(USArrests)
aux_max = c(-1,-1,-1,-1,-1)
aux_min = c(-1,-1,-1,-1,-1)
for (i1 in 1:5) {
for (i2 in 1:50) {
if (USArrests$UrbanPop[i2] != 0 & aux_min[i1] == -1) {
aux_min[i1] = i2
} else if (USArrests$UrbanPop[i2] != 0 & USArrests$UrbanPop[aux_min[i1]] > USArrests$UrbanPop[i2]) {
aux_min[i1] = i2
}
if (USArrests$UrbanPop[i2] != 0 & aux_max[i1] == -1) {
aux_max[i1] = i2
} else if (USArrests$UrbanPop[aux_max[i1]] < USArrests$UrbanPop[i2]) {
aux_max[i1] = i2
}
}
USArrests$UrbanPop[aux_min[i1]] = 0
USArrests$UrbanPop[aux_max[i1]] = 0
}
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MAIOR população: ")
for (i in aux_max) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MENOR população: ")
for (i in aux_min) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
data(USArrests)
aux_max = c(-1,-1,-1,-1,-1)
aux_min = c(-1,-1,-1,-1,-1)
for (i1 in 1:5) {
for (i2 in 1:50) {
if (USArrests$UrbanPop[i2] != 0 & aux_min[i1] == -1) {
aux_min[i1] = i2
} else if (USArrests$UrbanPop[i2] != 0 & USArrests$UrbanPop[aux_min[i1]] > USArrests$UrbanPop[i2]) {
aux_min[i1] = i2
}
if (USArrests$UrbanPop[i2] != 0 & aux_max[i1] == -1) {
aux_max[i1] = i2
} else if (USArrests$UrbanPop[aux_max[i1]] < USArrests$UrbanPop[i2]) {
aux_max[i1] = i2
}
}
USArrests$UrbanPop[aux_min[i1]] = 0
USArrests$UrbanPop[aux_max[i1]] = 0
}
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MAIOR população: ")
for (i in aux_max) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
assassinato = 0
assalto = 0
estupro = 0
print ("Média para cidades com MENOR população: ")
for (i in aux_min) {
assassinato = assassinato + USArrests$Murder[i]
assalto = assalto + USArrests$Assault[i]
estupro = estupro + USArrests$Rape[i]
}
cat("Assassinato: ", assassinato / 5)
cat("Assalto: ", assalto / 5)
cat("Estupro: ", estupro / 5)
summary(vetor)
# Fator
vetor = c(10,20,30,40,50)
summary(vetor)
is.numeric((vetor))
summary(vetor)
# Fator
vetor = c(10,20,30,40,50)
summary(vetor)
is.numeric((vetor))
vetor = as.factor(vetor)
summary(vetor)
# Fator
vetor = c(10,20,30,40,50,50,20,10,20)
summary(vetor)
is.numeric((vetor))
vetor = as.factor(vetor)
summary(vetor)
is.numeric(vetor)
is.factor(vetor)
vogais = c("a", "e", "i", "o", "u")
vogais[-3]
vogais[vogais == "o"]
vogais[vogais == "g"]
vogais = c("a", "e", "i", "o", "o", "u")
vogais[-3]
vogais[vogais == "o"]
vogais[vogais == "g"]
# Funções
fatorial = function(numero) {
for (i in range(numero)) {
i
}
}
fatorial(5)
# Funções
fatorial = function(numero) {
for (i in range(numero)) {
print(i)
}
}
fatorial(5)
# Funções
fatorial = function(numero) {
for (i in range(vetor)) {
print(i)
}
}
fatorial(5)
# Fator
vetor = c(10,20,30,40,50,50,20,10,20)
# Funções
fatorial = function(numero) {
for (i in range(vetor)) {
print(i)
}
}
# Funções
fatorial = function(numero) {
for (i in range(numero)) {
print(i)
}
}
# Funções
fatorial = function(numero) {
for (i in range(numero)) {
print(i)
}
}
fatorial(vetor)
# Fator
vetor = c(10,20,30,40,50,50,20,10,20)
summary(vetor)
is.numeric((vetor))
vetor = as.factor(vetor)
summary(vetor)
is.numeric(vetor)
is.factor(vetor)
# Filtro
vogais = c("a", "e", "i", "o", "o", "u")
vogais[-3]
vogais[vogais == "o"]
vogais[vogais == "g"]
# Funções
fatorial = function(numero) {
i = 1
multiplicacao = 1
whilte (i <= numero) {
multiplicacao = multiplicacao * i
i = i + 1
}
}
# Funções
fatorial = function(numero) {
i = 1
multiplicacao = 1
whilte (i <= numero) {
multiplicacao = multiplicacao * i
i = i + 1
}
}
# Fator
vetor = c(10,20,30,40,50,50,20,10,20)
summary(vetor)
is.numeric((vetor))
vetor = as.factor(vetor)
summary(vetor)
is.numeric(vetor)
is.factor(vetor)
# Filtro
vogais = c("a", "e", "i", "o", "o", "u")
vogais[-3]
vogais[vogais == "o"]
vogais[vogais == "g"]
# Funções
fatorial = function(numero) {
i = 1
multiplicacao = 1
whilte (i <= numero) {
# Funções
fatorial = function(numero) {
i = 1
multiplicacao = 1
while (i <= numero) {
multiplicacao = multiplicacao * i
i = i + 1
}
}
fatorial(5)
# Fator
vetor = c(10,20,30,40,50,50,20,10,20)
summary(vetor)
is.numeric((vetor))
vetor = as.factor(vetor)
summary(vetor)
is.numeric(vetor)
is.factor(vetor)
# Filtro
vogais = c("a", "e", "i", "o", "o", "u")
vogais[-3]
vogais[vogais == "o"]
vogais[vogais == "g"]
# Funções
fatorial = function(numero) {
i = 1
multiplicacao = 1
while (i <= numero) {
multiplicacao = multiplicacao * i
i = i + 1
}
return(multiplicacao)
}
fatorial(5)
multiplicacao = fatorial(5)
# Dataframes
nome = c("Joao", "Rafael", "Jose",)
idade = c(30,20,25,31)
# Dataframes
nome = c("Joao", "Rafael", "Jose","Maria")
idade = c(30,20,25,31)
df = data.frame(nome,idade)
summary(df)
df
df&nome[1]
df$nome[1]
df$idade[1]
df[1,]
df[1]
df[1,]
df[1]
df[1,]
df1:3,]
df[1:3,]
df[,1]
df[,2]
df$nova = NA
df
df$nova = NULL
df
df = read.csv("clima.csv")
df = read.csv("clima.csv")
df = read.csv("clima.csv")
setwd("./")
df = read.csv("clima.csv")
setwd("/home/will/Desktop/postgrad-ai/Estatistica_Aplicada/R/filtros_funcoes_dataframe")
df = read.csv("clima.csv")
df
# Fator
vetor = c(10,20,30,40,50,50,20,10,20)
summary(vetor)
is.numeric((vetor))
vetor = as.factor(vetor)
summary(vetor)
is.numeric(vetor)
is.factor(vetor)
# Filtro
vogais = c("a", "e", "i", "o", "o", "u")
vogais[-3]
vogais[vogais == "o"]
vogais[vogais == "g"]
# Funções
fatorial = function(numero) {
i = 1
multiplicacao = 1
while (i <= numero) {
multiplicacao = multiplicacao * i
i = i + 1
}
return(multiplicacao)
}
multiplicacao = fatorial(5)
# Dataframes
nome = c("Joao", "Rafael", "Jose","Maria")
idade = c(30,20,25,31)
df = data.frame(nome,idade)
summary(df)
df
df$nome[1]
df$idade[1]
df[1]
df[1,]
df[1:3,]
df[,1]
df[,2]
df$nova = NA
df
df$nova = NULL
df
setwd("/home/will/Desktop/postgrad-ai/Estatistica_Aplicada/R/filtros_funcoes_dataframe")
df = read.csv("clima.csv")
df
# Dataframes
nome = c("Joao", "Rafael", "Jose","Maria")
idade = c(30,20,25,31)
df = data.frame(nome,idade)
summary(df)
df
df$nome[1]
df$idade[1]
df[1]
df[1,]
df[1:3,]
df[,1]
df[,2]
df$nova = NA
df
df$nova = NULL
df
# Filtro elabordo
df$nome[df$idade >= 30]
vetor = c(10,20,10,20,30,40)
summary(vetor)
vetor = c(10,20,10,20,30,40)
summary(vetor)
mean(vetor)
# Mediana
median(vetor)
# Valor Minimo
min(vetor)
# Valor Máximo
max(vetor)
setwd("/home/will/Desktop/postgrad-ai/Estatistica_Aplicada/R/filtros_funcoes_dataframe")
df = read.csv("clima.csv")
mtcars
median(mtcars$hp)
mean(mtcars$hp)
# Dispersão
var(vetor)
# Dispersão
mean(vetor)
var(vetor)
# ou
mean(vetor)
resultado = ((10 - 21.66667)^2 + (20 - 21.66667)^2 + (10 - 21.66667)^2 + (20 - 21.66667)^2 + (30 - 21.66667)^2 + (40 - 21.66667)^2) / length(vetor)
resultado
resultado = ((10 - 21.66667)^2 + (20 - 21.66667)^2 + (10 - 21.66667)^2 + (20 - 21.66667)^2 + (30 - 21.66667)^2 + (40 - 21.66667)^2) / length(vetor) - 1
resultado
# Dispersão
var(vetor)
resultado = ((10 - 21.66667)^2 + (20 - 21.66667)^2 + (10 - 21.66667)^2 + (20 - 21.66667)^2 + (30 - 21.66667)^2 + (40 - 21.66667)^2) / (length(vetor) - 1)
resultado
# Desvio padrão
sd(vetor)
sqrt(sum(vetor))
EuStockMarkets
sqrt(sum(vetor))
